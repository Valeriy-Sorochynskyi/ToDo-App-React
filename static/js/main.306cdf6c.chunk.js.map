{"version":3,"sources":["TodoItem.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","type","checked","completed","onChange","handleCheck","text","ToDoList","_ref","addItem","handleOnChange","value","inputElement","items","length","placeholder","event","target","ref","onClick","map","item","src_TodoItem","key","App","state","currentItem","newItem","_this","concat","Object","toConsumableArray","setState","itemText","Date","now","index","indexOf","newItems","objectSpread","Fragment","src_ToDoList","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAkBeA,MAhBf,SAAkBC,GAEhB,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,WACLC,QAASN,EAAMO,UACfC,SAAWR,EAAMS,cAEnBR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,SCoBHC,EA7BE,SAAAC,GAA0E,IAAvEC,EAAuED,EAAvEC,QAASC,EAA8DF,EAA9DE,eAAgBC,EAA8CH,EAA9CG,MAAOC,EAAuCJ,EAAvCI,aAAcC,EAAyBL,EAAzBK,MAAOR,EAAkBG,EAAlBH,YACvE,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZa,EAAMC,OAASjB,EAAAC,EAAAC,cAAA,SAAIc,EAAMC,OAAV,eAAmC,GACnDjB,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLc,YAAY,sBACZX,SAAU,SAAAY,GAAK,OAAIN,EAAeM,EAAMC,OAAON,QAC/CO,IAAKN,EACLD,MAAOA,IAETd,EAAAC,EAAAC,cAAA,UAAQoB,QAAS,kBAAMV,MAAvB,QAEFZ,EAAAC,EAAAC,cAAA,UACGc,EAAMO,IAAI,SAAAC,GAAI,OACbxB,EAAAC,EAAAC,cAACuB,EAAD,CACEC,IAAKF,EAAKE,IACVjB,KAAMe,EAAKf,KACXH,UAAWkB,EAAKlB,UAChBE,YAAa,kBAAMA,EAAYgB,WCkC5BG,6MAvDbC,MAAQ,CACNZ,MAAO,GACPa,YAAa,CACXpB,KAAM,GACNiB,IAAK,GACLpB,WAAW,MAIfM,QAAU,WACR,IAAMkB,EAAUC,EAAKH,MAAMC,YAC3B,GAAqB,KAAjBC,EAAQrB,KAAa,CACvB,IAAMO,EAAK,GAAAgB,OAAAC,OAAAC,EAAA,EAAAD,CAAOF,EAAKH,MAAMZ,OAAlB,CAAyBc,IACpCC,EAAKI,SAAS,CACZnB,MAAOA,EACPa,YAAa,CAAEpB,KAAM,GAAIiB,IAAK,GAAIpB,WAAW,SAKnDO,eAAiB,SAACuB,GAChB,IAAMP,EAAc,CAAEpB,KAAM2B,EAAUV,IAAKW,KAAKC,MAAOhC,WAAW,GAClEyB,EAAKI,SAAS,CACZN,mBAIJrB,YAAc,SAACgB,GACdO,EAAKI,SAAS,SAAAxB,GAAa,IAAXK,EAAWL,EAAXK,MACRuB,EAAQvB,EAAMwB,QAAQhB,GACtBiB,EAAQR,OAAAC,EAAA,EAAAD,CAAOjB,GAKrB,OAJAyB,EAASF,GAATN,OAAAS,EAAA,EAAAT,CAAA,GACMT,EADN,CAEIlB,WAAYkB,EAAKlB,YAEd,CAACU,MAAOyB,8EAKhB,OACEzC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAAC0C,EAAD,CACEhC,QAASiC,KAAKjC,QACdC,eAAgBgC,KAAKhC,eACrBL,YAAaqC,KAAKrC,YAClBO,aAAc8B,KAAK9B,aACnBD,MAAO+B,KAAKjB,MAAMC,YAAYpB,KAC9BO,MAAO6B,KAAKjB,MAAMZ,gBAjDV8B,IAAMC,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.306cdf6c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TodoItem(props) {\r\n\r\n  return (\r\n    <li>\r\n      <div className=\"todo-item\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={props.completed}\r\n          onChange={ props.handleCheck}\r\n        />\r\n        <p>{props.text}</p>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst ToDoList = ({ addItem, handleOnChange, value, inputElement, items, handleCheck }) => {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <h1>ToDo List</h1>\r\n      <div className=\"todo-list-header\">\r\n        {items.length ? <p>{items.length} items left</p> : \"\"}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your tasks...\"\r\n          onChange={event => handleOnChange(event.target.value)}\r\n          ref={inputElement}\r\n          value={value}\r\n        />\r\n        <button onClick={() => addItem()}>Add</button>\r\n      </div>\r\n      <ul>\r\n        {items.map(item => (\r\n          <TodoItem\r\n            key={item.key}\r\n            text={item.text}\r\n            completed={item.completed}\r\n            handleCheck={() => handleCheck(item)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\nimport ToDoList from \"./ToDoList\";\nclass App extends React.Component {\n  state = {\n    items: [],\n    currentItem: {\n      text: \"\",\n      key: \"\",\n      completed: false\n    }\n  };\n\n  addItem = () => {\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: { text: \"\", key: \"\", completed: false }\n      });\n    }\n  }\n\n  handleOnChange = (itemText) => {\n    const currentItem = { text: itemText, key: Date.now(), completed: false };\n    this.setState({\n      currentItem\n    });\n  }\n\n  handleCheck = (item) => {\n   this.setState(({items}) => {\n     const index = items.indexOf(item);\n     const newItems = [...items];\n     newItems[index] = {\n        ...item, \n         completed: !item.completed\n     }\n     return {items: newItems}\n   })\n  }\n\n  render() {\n    return (\n      <>\n        <ToDoList\n          addItem={this.addItem}\n          handleOnChange={this.handleOnChange}\n          handleCheck={this.handleCheck}\n          inputElement={this.inputElement}\n          value={this.state.currentItem.text}\n          items={this.state.items}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}